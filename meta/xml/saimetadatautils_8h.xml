<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="saimetadatautils_8h" kind="file" language="C++">
    <compoundname>saimetadatautils.h</compoundname>
    <includes refid="saimetadatatypes_8h" local="yes">saimetadatatypes.h</includes>
    <incdepgraph>
      <node id="2">
        <label>saimetadatatypes.h</label>
        <link refid="saimetadatatypes_8h"/>
      </node>
      <node id="1">
        <label>saimetadatautils.h</label>
        <link refid="saimetadatautils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1ga2865b48163934a7f63f41cad61e270d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sai_metadata_is_allowed_object_type</definition>
        <argsstring>(_In_ const sai_attr_metadata_t *metadata, _In_ sai_object_type_t object_type)</argsstring>
        <name>sai_metadata_is_allowed_object_type</name>
        <param>
          <type>_In_ const <ref refid="group__SAIMETADATATYPES_1ga4c405e86ac70b1cb3bd2ee38f032f4eb" kindref="member">sai_attr_metadata_t</ref> *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>_In_ <ref refid="group__SAITYPES_1ga1ca8e8725c9b140661ffae60b880fe95" kindref="member">sai_object_type_t</ref></type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
<para>Is allowed object type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute metadata </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Object type to be checked</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if object is allowed on this attribute, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="44" column="13" declfile="saimetadatautils.h" declline="44" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1ga9bcbb75a76669a04bd35ed1832b8d61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sai_metadata_is_allowed_enum_value</definition>
        <argsstring>(_In_ const sai_attr_metadata_t *metadata, _In_ int value)</argsstring>
        <name>sai_metadata_is_allowed_enum_value</name>
        <param>
          <type>_In_ const <ref refid="group__SAIMETADATATYPES_1ga4c405e86ac70b1cb3bd2ee38f032f4eb" kindref="member">sai_attr_metadata_t</ref> *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>_In_ int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Is allowed enum value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute metadata </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum value to be checked</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if enum value is allowed on this attribute, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="56" column="13" declfile="saimetadatautils.h" declline="56" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1gab04361c7b8a801bf0b1845cd1c33eb59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__SAIMETADATATYPES_1ga4c405e86ac70b1cb3bd2ee38f032f4eb" kindref="member">sai_attr_metadata_t</ref> *</type>
        <definition>const sai_attr_metadata_t * sai_metadata_get_attr_metadata</definition>
        <argsstring>(_In_ sai_object_type_t object_type, _In_ sai_attr_id_t attr_id)</argsstring>
        <name>sai_metadata_get_attr_metadata</name>
        <param>
          <type>_In_ <ref refid="group__SAITYPES_1ga1ca8e8725c9b140661ffae60b880fe95" kindref="member">sai_object_type_t</ref></type>
          <declname>object_type</declname>
        </param>
        <param>
          <type>_In_ sai_attr_id_t</type>
          <declname>attr_id</declname>
        </param>
        <briefdescription>
<para>Gets attribute metadata based on object type and attribute id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Object type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute Id</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object metadata or NULL in case of failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="68" column="34" declfile="saimetadatautils.h" declline="68" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1gac94ad0f04a104710fca177ff57b6f013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__SAIMETADATATYPES_1ga4c405e86ac70b1cb3bd2ee38f032f4eb" kindref="member">sai_attr_metadata_t</ref> *</type>
        <definition>const sai_attr_metadata_t * sai_metadata_get_attr_metadata_by_attr_id_name</definition>
        <argsstring>(_In_ const char *attr_id_name)</argsstring>
        <name>sai_metadata_get_attr_metadata_by_attr_id_name</name>
        <param>
          <type>_In_ const char *</type>
          <declname>attr_id_name</declname>
        </param>
        <briefdescription>
<para>Gets attribute metadata based on attribute id name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attr_id_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute id name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object metadata or NULL in case of failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="79" column="34" declfile="saimetadatautils.h" declline="79" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1gab0e396bdb7b39d50e028ffaab7533604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__SAIMETADATATYPES_1ga4c405e86ac70b1cb3bd2ee38f032f4eb" kindref="member">sai_attr_metadata_t</ref> *</type>
        <definition>const sai_attr_metadata_t * sai_metadata_get_attr_metadata_by_attr_id_name_ext</definition>
        <argsstring>(_In_ const char *attr_id_name)</argsstring>
        <name>sai_metadata_get_attr_metadata_by_attr_id_name_ext</name>
        <param>
          <type>_In_ const char *</type>
          <declname>attr_id_name</declname>
        </param>
        <briefdescription>
<para>Gets attribute metadata based on attribute id name, supporting case of attribute id name is in deserialized buffer and terminated by characters listed in function sai_serialize_is_char_allowed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attr_id_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute id name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object metadata or NULL in case of failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="91" column="34" declfile="saimetadatautils.h" declline="91" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1ga711e3e78d7084e6cfefa4d7e2fed6268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__SAIMETADATATYPES_1ga4c405e86ac70b1cb3bd2ee38f032f4eb" kindref="member">sai_attr_metadata_t</ref> *</type>
        <definition>const sai_attr_metadata_t * sai_metadata_get_ignored_attr_metadata_by_attr_id_name</definition>
        <argsstring>(_In_ const char *attr_id_name)</argsstring>
        <name>sai_metadata_get_ignored_attr_metadata_by_attr_id_name</name>
        <param>
          <type>_In_ const char *</type>
          <declname>attr_id_name</declname>
        </param>
        <briefdescription>
<para>Gets ignored attribute metadata based on attribute id name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attr_id_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute id name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to object metadata or NULL in case of failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="101" column="34" declfile="saimetadatautils.h" declline="101" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1gac6a2018926357dd3429919453883d896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * sai_metadata_get_enum_value_name</definition>
        <argsstring>(_In_ const sai_enum_metadata_t *metadata, _In_ int value)</argsstring>
        <name>sai_metadata_get_enum_value_name</name>
        <param>
          <type>_In_ const <ref refid="group__SAIMETADATATYPES_1ga3958ad8fbdf3830857358199fe733509" kindref="member">sai_enum_metadata_t</ref> *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>_In_ int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Gets string representation of enum value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum metadata </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum value to be converted to string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String representation of enum value or NULL if value was not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="112" column="19" declfile="saimetadatautils.h" declline="112" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1ga4e2d76a35a20a69141b7c5e524dee5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * sai_metadata_get_enum_value_short_name</definition>
        <argsstring>(_In_ const sai_enum_metadata_t *metadata, _In_ int value)</argsstring>
        <name>sai_metadata_get_enum_value_short_name</name>
        <param>
          <type>_In_ const <ref refid="group__SAIMETADATATYPES_1ga3958ad8fbdf3830857358199fe733509" kindref="member">sai_enum_metadata_t</ref> *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>_In_ int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Gets short string representation of enum value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum metadata </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum value to be converted to string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Short string representation of enum value or NULL if value was not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="124" column="19" declfile="saimetadatautils.h" declline="124" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1gab1babfdf0f5439f7a0d8f9b56b9f397a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__SAITYPES_1gaa03b4ea06d1e99354b7b1f0bb4e5cd6c" kindref="member">sai_attribute_t</ref> *</type>
        <definition>const sai_attribute_t * sai_metadata_get_attr_by_id</definition>
        <argsstring>(_In_ sai_attr_id_t id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)</argsstring>
        <name>sai_metadata_get_attr_by_id</name>
        <param>
          <type>_In_ sai_attr_id_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>_In_ uint32_t</type>
          <declname>attr_count</declname>
        </param>
        <param>
          <type>_In_ const <ref refid="group__SAITYPES_1gaa03b4ea06d1e99354b7b1f0bb4e5cd6c" kindref="member">sai_attribute_t</ref> *</type>
          <declname>attr_list</declname>
        </param>
        <briefdescription>
<para>Gets attribute from attribute list by attribute id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute id to be found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of attributes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr_list</parametername>
</parameternamelist>
<parameterdescription>
<para>List of attributes to search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Attribute pointer with requested ID or NULL if not found. When multiple attributes with the same id are passed, only first attribute is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="139" column="30" declfile="saimetadatautils.h" declline="139" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1ga1aecb5c6bd82669de45df2415cb89229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__SAIMETADATATYPES_1ga6e19ca3cf2ad65005e381909e14a9cd0" kindref="member">sai_object_type_info_t</ref> *</type>
        <definition>const sai_object_type_info_t * sai_metadata_get_object_type_info</definition>
        <argsstring>(_In_ sai_object_type_t object_type)</argsstring>
        <name>sai_metadata_get_object_type_info</name>
        <param>
          <type>_In_ <ref refid="group__SAITYPES_1ga1ca8e8725c9b140661ffae60b880fe95" kindref="member">sai_object_type_t</ref></type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
<para>Gets object type info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Object type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object type info structure or NULL if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="151" column="37" declfile="saimetadatautils.h" declline="151" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1ga09f1a65e1cef362a0e36a3f259b9fb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sai_metadata_is_object_type_valid</definition>
        <argsstring>(_In_ sai_object_type_t object_type)</argsstring>
        <name>sai_metadata_is_object_type_valid</name>
        <param>
          <type>_In_ <ref refid="group__SAITYPES_1ga1ca8e8725c9b140661ffae60b880fe95" kindref="member">sai_object_type_t</ref></type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
<para>Checks if object type is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Object type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if object type is valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="161" column="13" declfile="saimetadatautils.h" declline="161" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1ga6e99b18a927bc09f3cfebec75385e80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sai_metadata_is_object_type_oid</definition>
        <argsstring>(_In_ sai_object_type_t object_type)</argsstring>
        <name>sai_metadata_is_object_type_oid</name>
        <param>
          <type>_In_ <ref refid="group__SAITYPES_1ga1ca8e8725c9b140661ffae60b880fe95" kindref="member">sai_object_type_t</ref></type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
<para>Checks whether object type is OID object type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Object type to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if object type is OID type, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="171" column="13" declfile="saimetadatautils.h" declline="171" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1gae705841d28674b6096f9d7b2eb8c862b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sai_metadata_is_condition_met</definition>
        <argsstring>(_In_ const sai_attr_metadata_t *metadata, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)</argsstring>
        <name>sai_metadata_is_condition_met</name>
        <param>
          <type>_In_ const <ref refid="group__SAIMETADATATYPES_1ga4c405e86ac70b1cb3bd2ee38f032f4eb" kindref="member">sai_attr_metadata_t</ref> *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>_In_ uint32_t</type>
          <declname>attr_count</declname>
        </param>
        <param>
          <type>_In_ const <ref refid="group__SAITYPES_1gaa03b4ea06d1e99354b7b1f0bb4e5cd6c" kindref="member">sai_attribute_t</ref> *</type>
          <declname>attr_list</declname>
        </param>
        <briefdescription>
<para>Check if condition met. </para>
        </briefdescription>
        <detaileddescription>
<para>List of attributes will be examined in terms of conditions. This is convenient since user can pass list when calling create API. If condition attribute is not on the list, then default value will be examined.</para>
<para>NOTE: When multiple attributes with the same ID are passed, sai_metadata_get_attr_by_id will select only first one. Function will not be able to handle duplicated attributes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>Metadata of attribute that we need to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of attributes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr_list</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute list to check. All attributes must belong to the same object type as metadata parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if condition is in force, false otherwise. False will be also returned if any of input pointers is NULL or attribute is not conditional. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="194" column="13" declfile="saimetadatautils.h" declline="194" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1ga1cbbfa19bf3af8f2b47feeb71425d4e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sai_metadata_is_validonly_met</definition>
        <argsstring>(_In_ const sai_attr_metadata_t *metadata, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)</argsstring>
        <name>sai_metadata_is_validonly_met</name>
        <param>
          <type>_In_ const <ref refid="group__SAIMETADATATYPES_1ga4c405e86ac70b1cb3bd2ee38f032f4eb" kindref="member">sai_attr_metadata_t</ref> *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>_In_ uint32_t</type>
          <declname>attr_count</declname>
        </param>
        <param>
          <type>_In_ const <ref refid="group__SAITYPES_1gaa03b4ea06d1e99354b7b1f0bb4e5cd6c" kindref="member">sai_attribute_t</ref> *</type>
          <declname>attr_list</declname>
        </param>
        <briefdescription>
<para>Check if valid only condition is met. </para>
        </briefdescription>
        <detaileddescription>
<para>List of attributes will be examined in terms of valid only conditions. This is convenient since user can pass list when calling create API. If valid only condition attribute is not on the list, then default value will be examined.</para>
<para>NOTE: When multiple attributes with the same ID are passed, sai_metadata_get_attr_by_id will select only first one. Function will not be able to handle duplicated attributes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>Metadata of attribute that we need to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of attributes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr_list</parametername>
</parameternamelist>
<parameterdescription>
<para>Attribute list to check. All attributes must belong to the same object type as metadata parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if valid only condition is in force, false otherwise. False will be also returned if any of input pointers is NULL or attribute is not valid only conditional. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="220" column="13" declfile="saimetadatautils.h" declline="220" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SAIMETADATAUTILS_1gaacb6af5e6f8573a471e1f7572b31692f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sai_api_version_t</type>
        <definition>sai_api_version_t sai_metadata_query_api_version</definition>
        <argsstring>(void)</argsstring>
        <name>sai_metadata_query_api_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Metadata query API version. </para>
        </briefdescription>
        <detaileddescription>
<para>Will return SAI version which was used to generate metadata. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="saimetadatautils.h" line="230" column="26" declfile="saimetadatautils.h" declline="230" declcolumn="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This module defines SAI Metadata Utilities. </para>
    </briefdescription>
    <detaileddescription>
<para>Copyright (c) 2014 Microsoft Open Technologies, Inc.</para>
<para>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at <ulink url="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</ulink></para>
<para>THIS CODE IS PROVIDED ON AN <emphasis>AS IS</emphasis> BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.</para>
<para>See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.</para>
<para>Microsoft would like to thank the following companies for their review and assistance with these files: Intel Corporation, Mellanox Technologies Ltd, Dell Products, L.P., Facebook, Inc., Marvell International Ltd. </para>
    </detaileddescription>
    <location file="saimetadatautils.h"/>
  </compounddef>
</doxygen>
